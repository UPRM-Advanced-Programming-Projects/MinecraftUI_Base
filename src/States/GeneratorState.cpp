#include "GeneratorState.h"

GeneratorState::GeneratorState(Player* player, ItemHandler* instantiatr) : State(player) {
    this->background.load("images/states/generator.png");
    this->createLootTables();
    this->toolContainer = ItemContainer(195,137); // Container that holds the tool to be used
    this->resultContainer = ItemContainer(440, 140); // Container that holds the resulting item
    this->instantiator = instantiatr;
}

void GeneratorState::createLootTables() {

    /**
     * The more of a number there is inside the loot table, the likelier it is to be generated by the GeneratorState
     * See ItemHandler.h for item numbers.
     */
    this->lootTables.push_back({30,30,30,30,30,30,30,30,30,30,33,33,33,33,32,32,32,31,31,36});  //Pickaxe loot table
    this->lootTables.push_back({1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,39,39,39,39,39,39,38,38,38,38,38,8 }); // Shovel loot table
    this->lootTables.push_back({43,43,43,43,43,45,45,45,45,45,47,47,47,47,48,48,48,49,49,49}); // Sword loot table
    this->lootTables.push_back({4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,3 ,3 ,3 ,3 ,3 ,2 ,2 ,2 }); // Axe loot table
    this->lootTables.push_back({51,51,51,51,51,51,51,51,53,53,53,53,53,53,55,55,55,55,55,37}); // Hoe loot table
}

void GeneratorState::generateItem() {
    srand(time(0)); // Randomizer
    if (toolContainer.isEmpty()) return; 
    // Save the tool's name
    string toolName = this->toolContainer.getCurrentItem().getName();
    int resultItemNumber = 0;   // Initialize the resultant item to air
    int lootTableNumber = 0;    // Initialize the selected loot table to Pickaxe
    
    // .find(substr) will return string::npos if the sub string was not found
    // Select what loot table to use
    if (toolName.find("Pickaxe") != string::npos) lootTableNumber = 0;
    else if (toolName.find("Shovel") != string::npos) lootTableNumber = 1;
    else if (toolName.find("Sword") != string::npos) lootTableNumber = 2;
    else if (toolName.find("Axe") != string::npos) lootTableNumber = 3;
    else if (toolName.find("Hoe") != string::npos) lootTableNumber = 4;

    // Select the tool's tier. The closer the value is to zero, the better the tool
    double toolTier = 100;
    if (toolName.find("Diamond") != string::npos) toolTier = 1.5; 
    else if (toolName.find("Gold") != string::npos) toolTier = 2;
    else if (toolName.find("Iron") != string::npos) toolTier = 5;
    else if (toolName.find("Stone") != string::npos) toolTier = 8;
    else if (toolName.find("Wooden") != string::npos) toolTier = lootTables[lootTableNumber].size();
    /**
     * rand()%lootTables[lootTableNumber].size() will return a random index inside the selected loot table
     * Note that the rarest items of the loot table are always near or at the end of the array
     * lootTables[lootTableNumber].size()/toolTier will return a positive integer number, which will 'increase luck'
     * 
     */
    int lootTableIndex = rand()%lootTables[lootTableNumber].size() + lootTables[lootTableNumber].size()/toolTier;
    // Make sure the randomized, altered, index is within the selected table's domain. If not, select the last element
    resultItemNumber = lootTables[lootTableNumber][fmin(lootTableIndex,lootTables[lootTableNumber].size()-1)]; 

    // Set the new item if the resultContainer it empty
    if (this->resultContainer.isEmpty()) {
        resultContainer.setCurrentItem(instantiator->getItemFromNumber(resultItemNumber));
        resultContainer.setItemCount(1); 
    }
    // Add one if the generated item was already inside the resultContainer
    else if (this->resultContainer.getCurrentItem().getItemNumber() == resultItemNumber && !this->resultContainer.isMaxed()) {
        resultContainer.addOne();
    }

}
                                                  
void GeneratorState::draw() {
    this->background.draw(0,0);
    this->toolContainer.draw();
    this->resultContainer.draw();
    this->getPlayer()->draw();
}

void GeneratorState::mouseMoved(int x,int y) {
    State::mouseMoved(x,y);
    // Check if the mouse enters any of the state's containers
    this->toolContainer.mouseEntered(x,y);
    this->resultContainer.mouseEntered(x,y);
}

void GeneratorState::mousePressed(int x, int y, int button) {
    State::mousePressed(x,y,button);
    if (button == 0) {
        // Only allow interaction if the player's container is empty
        if (this->getPlayer()->getCursorContainer().isEmpty()) this->resultContainer.leftMouseClicked(x,y,this->getPlayer()->getCursorContainer());
        // Only allow interaction if the player's container is empty (extracting) or if the player's item is a tool
        if (this->getPlayer()->getCursorContainer().isEmpty() || this->getPlayer()->getCursorContainer().isTool()) this->toolContainer.leftMouseClicked(x,y,this->getPlayer()->getCursorContainer());
    }
    if (button == 2) {
        // Only allow interaction with the the player's container is empty. 
        if (this->getPlayer()->getCursorContainer().isEmpty()) this->resultContainer.rightMouseClicked(x,y,this->getPlayer()->getCursorContainer()); 
        // Only allow interaction if the player's container is empty (taking half) or if the player's item is a tool
        if (this->getPlayer()->getCursorContainer().isEmpty() || this->getPlayer()->getCursorContainer().isTool()) this->toolContainer.rightMouseClicked(x,y,this->getPlayer()->getCursorContainer());
    }
}

